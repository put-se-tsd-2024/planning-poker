@page "/UserStories/Create/{RoomId}"

@using Microsoft.AspNetCore.SignalR.Client
@using PlanningPoker.Client.Services
@using PlanningPoker.Shared
@inject NavigationManager NavigationManager
@inject RoomStatusManager StatusManager

@if (StatusManager.Player == null)
{
    <h3>DHJKAHDA</h3>
}
else
{
    <div class="container">
        <h3>Create New User Story</h3>
        <EditForm Model="NewUserStory" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="Title">Title:</label>
                <InputText id="Title" class="form-control" @bind-Value="NewUserStory.Title" />
            </div>

            <div class="form-group">
                <label for="Description">Description:</label>
                <InputTextArea id="Description" class="form-control" @bind-Value="NewUserStory.Description" />
            </div>

            <div class="form-group">
                <label for="AssignedTo">AssignedTo:</label>
                <InputText id="AssignedTo" class="form-control" @bind-Value="NewUserStory.AssignedTo" />
            </div>

            <div class="form-group">
                <label for="IsCompleted">IsCompleted:</label>
                <InputText id="IsCompleted" class="form-control" @bind-Value="NewUserStory.IsCompleted" />
            </div>

            <h4>Works</h4>
            @foreach (var work in NewUserStory.Works)
            {
                <div class="form-group">
                    <label>Work Title:</label>
                    <InputText class="form-control" @bind-Value="work.Title" />
                </div>
                <div class="form-group">
                    <label>Description:</label>
                    <InputTextArea class="form-control" @bind-Value="work.Description" />
                </div>
                <div class="form-group">
                    <label>Estimation:</label>
                    <InputText class="form-control" @bind-Value="work.Estimation" />
                </div>
            }
            <button type="button" class="btn btn-secondary" @onclick="AddWork">Add Work</button>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public string RoomId { get; set; }

    private UserStory NewUserStory;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        NewUserStory = new UserStory { RoomId = RoomId, Works = new List<Work>() };

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/RoomHub?RoomId={RoomId}"))
            .Build();

        await hubConnection.StartAsync();
    }

    private void AddWork()
    {
        NewUserStory.Works.Add(new Work());
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await hubConnection.InvokeAsync("CreateUserStoryAsync", NewUserStory);
            NavigationManager.NavigateTo($"/UserStories/{RoomId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}
